
// OBJECTSHADER_LAYOUT:
// OBJECTSHADER_LAYOUT_COMMON	1	//	- layout for common passes
// OBJECTSHADER_LAYOUT_PREPASS	2	//	- layout for prepass

// TEST LAYOUT:
// #define OBJECTSHADER_LAYOUT 1

#include "common/objectHF.hlsli"
#include "common/lighting.hlsli"
#include "common/primitive.hlsli"

// StructuredBuffer<uint> inLightTiles : register(t5);

// Vertex Shader function for Main Pass
META_VS(true)
META_PERMUTATION_1(OBJECTSHADER_LAYOUT = 1)	// Common
META_PERMUTATION_1(OBJECTSHADER_LAYOUT = 2)	// Prepass
PixelInput VS(VertexInput input)
{
    VertexSurface surface;
    surface.Create(input);

    PixelInput Out;
    Out.pos = surface.position;
    Out.pos = mul(GetCamera().viewProjection, Out.pos);

#ifdef OBJECTSHADER_USE_COLOR
    Out.color = surface.color;
#endif

#ifdef OBJECTSHADER_USE_UVSETS
	Out.uvsets.xy = surface.uv;
    Out.uvsets.zw = float2(0, 0);    // TODO
#endif

#ifdef OBJECTSHADER_USE_NORMAL
    Out.nor = surface.normal;
#endif

#ifdef OBJECTSHADER_USE_TANGENT
    Out.tan = surface.tangent;
#endif

#ifdef OBJECTSHADER_USE_POSITION3D
    Out.pos3D = surface.position.xyz;
#endif

#ifdef OBJECTSHADER_USE_INSTANCEINDEX
	Out.instanceIndex = input.GetInstancePointer().instanceIndex;
#endif

    return Out;
}

// Pixel Shader function for Main Pass
META_PS(true)
META_PERMUTATION_1(OBJECTSHADER_LAYOUT = 1)
float4 PS(PixelInput input) : SV_Target
{
    Surface surface;
    surface.Init();
    surface.Pixel = input.pos.xy;

    // Normal
#ifdef OBJECTSHADER_USE_NORMAL
    surface.N = normalize(input.nor);
#endif

    // Positon3D
#ifdef OBJECTSHADER_USE_POSITION3D
    surface.P = input.pos3D;
    surface.V = GetCamera().position - input.pos3D;
    surface.V /= length(surface.V);
#endif

    // Tagent
#ifdef OBJECTSHADER_USE_TANGENT
    surface.T = input.tan;
    surface.T.xyz = normalize(surface.T.xyz);
	float3 binormal = normalize(cross(surface.T.xyz, surface.N) * surface.T.w);
	float3x3 TBN = float3x3(surface.T.xyz, binormal, surface.N);
#endif

    float4 color = 1;

#ifdef OBJECTSHADER_USE_UVSETS
    [branch]
    if (GetMaterial().texture_basecolormap_index >= 0)
    {
        float4 baseColorMap = texture_basecolormap.Sample(sampler_object, input.uvsets.xy);
        baseColorMap.rgb = DEGAMMA(baseColorMap.rgb);
        color *= baseColorMap;
    }
#endif

#ifdef OBJECTSHADER_USE_COLOR
    color *= GetMaterial().baseColor * input.color;
#endif

    // Setup surface
    surface.Setup(GetMaterial(), color);

    // Normal mapping
#ifdef OBJECTSHADER_USE_TANGENT
    [branch]
    if (GetMaterial().texture_normalmap_index >= 0)
    {
        const float3 N = surface.N;
        float3 normalMap = float3(texture_normalmap.Sample(sampler_object, input.uvsets.xy).rg, 1);
        float3 bumpColor = normalMap.rgb * 2 - 1;
        surface.N = normalize(lerp(N, mul(bumpColor, TBN), 1.0f));
    }
#endif

    // Update surfcae
    surface.Update();

    // Lighinting
    float3 ambient = GetAmbient(surface.N);

    Lighting lighting;
    lighting.Init(0, 0, ambient, 0);
    TiledForwardLighting(surface, lighting);
    ApplyLighting(surface, lighting, color);

    return color;
}

// Pixel Shader function for Depth Pass
[earlydepthstencil]
META_PS(true)
META_PERMUTATION_1(OBJECTSHADER_LAYOUT = 2)
uint PS_Depth(PixelInput input, in uint primitiveID : SV_PrimitiveID, out uint coverage : SV_Coverage) : SV_Target
{
    PrimitiveID prim;
    prim.primitiveIndex = primitiveID;
    prim.instanceIndex = input.instanceIndex;
    prim.subsetIndex = push.geometryIndex - LoadInstance(input.instanceIndex).geometryOffset;   // Be care of the lodOffset
    return prim.Pack();
}