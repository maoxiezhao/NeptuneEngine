#include "common/global.hlsli"
#include "common/shaderInterop_renderer.h"

RWByteAddressBuffer outputMeshlets : register(u0);

static const uint THREADCOUNT = 64;
META_CS(true)
[numthreads(1, THREADCOUNT, 1)]
void CS(uint3 DTid : SV_DispatchThreadID, uint3 Gid : SV_GroupID, uint groupIndex : SV_GroupIndex)
{	
    uint instanceIndex = Gid.x;
    ShaderMeshInstance instance = LoadInstance(instanceIndex);
    for (int i = 0; i < instance.geometryCount; i++)
    {
        uint geometryIndex = instance.geometryOffset + i;
        ShaderGeometry geometry = LoadGeometry(geometryIndex);
        for (uint j = groupIndex; j < geometry.meshletCount; j += THREADCOUNT)
		{
			ShaderMeshlet meshlet;
			meshlet.instanceIndex = instanceIndex;
			meshlet.geometryIndex = geometryIndex;
			meshlet.primitiveOffset = j * MESHLET_TRIANGLE_COUNT;

			uint meshletIndex = instance.meshletOffset + geometry.meshletOffset + j;
			outputMeshlets.Store<ShaderMeshlet>(meshletIndex * sizeof(ShaderMeshlet), meshlet);
		}
    }
}