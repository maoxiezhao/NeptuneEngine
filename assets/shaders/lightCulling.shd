#include "common/global.hlsli"
#include "common/shaderInterop_renderer.h"

// A article abount Forard+
// https://www.3dgep.com/forward-plus/#Forward
// Wave Intrinsics
// https://zhuanlan.zhihu.com/p/469436345
// Optimizing tile-based light culling
// https://wickedengine.net/2018/01/10/optimizing-tile-based-light-culling/

struct AABB
{
	float3 c;
	float3 e;

	float3 getMin() { return c - e; }
	float3 getMax() { return c + e; }
};

struct Sphere
{
    float3 c;
    float r;
};

struct Plane
{
	float3	N;		// Plane normal.
	float	d;		// Distance to origin.
};

// Tile frustum
struct Frustum
{
	Plane planes[4];	// left, right, top, bottom frustum planes.
};

//  Check to see if a sphere intersects the AABB
bool SphereInsideAABB(Sphere sphere, AABB aabb)
{
    float3 delta = max(0, abs(aabb.c - sphere.c) - aabb.e);
    float deltaSq = dot(delta, delta);
    return deltaSq < sphere.r * sphere.r;
}

//  Check to see if a sphere is fully behind a plane
bool SphereInsidePlane(Sphere sphere, Plane plane)
{
    return dot(plane.N, sphere.c) - plane.d < -sphere.r;
}

bool SphereInsideFrustum(Sphere sphere, Frustum frustum, float zNear, float zFar)
{
    bool result = true;
	result = ((sphere.c.z + sphere.r < zNear || sphere.c.z - sphere.r > zFar) ? false : result);
	result = ((SphereInsidePlane(sphere, frustum.planes[0])) ? false : result);
	result = ((SphereInsidePlane(sphere, frustum.planes[1])) ? false : result);
	result = ((SphereInsidePlane(sphere, frustum.planes[2])) ? false : result);
	result = ((SphereInsidePlane(sphere, frustum.planes[3])) ? false : result);

	return result;
}

float4 ClipToView(float4 clip)
{
    float4 view = mul(GetCamera().invProjection, clip);
    view = view / view.w;
    return view;
}

float4 ScreenToView(float4 screen, float2 dimRcp)
{	
    // Convert to normalized texture coordinates
	float2 texcoord = screen.xy * dimRcp;
 
    // Convert to clip space
    float4 clip = float4(float2(texcoord.x, 1.0f - texcoord.y) * 2.0f - 1.0f, screen.z, screen.w);

    return ClipToView(clip);
}

/////////////////////////////////////////////////////////////////////////////
/// Frustum computation
/////////////////////////////////////////////////////////////////////////////

RWStructuredBuffer<Frustum> outFrustums : register(u0);

// Compute a plane from 3 noncollinear points that form a triangle.
// This equation assumes a right-handed (counter-clockwise winding order) 
// coordinate system to determine the direction of the plane normal.
Plane ComputePlane(float3 p0, float3 p1, float3 p2)
{
    Plane plane;
    float3 v0 = p1 - p0;
    float3 v1 = p2 - p0;
    plane.N = normalize(cross(v0, v1));
    plane.d = dot(plane.N, p0);
    return plane;   
}

META_CS(true)
[numthreads(TILED_CULLING_BLOCK_SIZE, TILED_CULLING_BLOCK_SIZE, 1)]
void CS_Frustum(uint3 DTid : SV_DispatchThreadID)
{
    uint2 dim;
    texture_depth.GetDimensions(dim.x, dim.y);
    float2 dimRcp = rcp(dim);

	// View space eye position is always at the origin.
	const float3 eyePos = float3(0, 0, 0);

	// Compute 4 points on the far clipping plane to use as the 
	// frustum vertices.
	float4 screenSpace[4];
    // Top left point
	screenSpace[0] = float4(DTid.xy * TILED_CULLING_BLOCK_SIZE, 1.0f, 1.0f);
	// Top right point
	screenSpace[1] = float4(float2(DTid.x + 1, DTid.y) * TILED_CULLING_BLOCK_SIZE, 1.0f, 1.0f);
	// Bottom left point
	screenSpace[2] = float4(float2(DTid.x, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, 1.0f, 1.0f);
	// Bottom right point
	screenSpace[3] = float4(float2(DTid.x + 1, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, 1.0f, 1.0f);

    float3 viewSpace[4];
    for ( int i = 0; i < 4; i++ )
    {
        viewSpace[i] = ScreenToView(screenSpace[i], dimRcp).xyz;
    }

	Frustum frustum;
	// Left plane
	frustum.planes[0] = ComputePlane(viewSpace[2], eyePos, viewSpace[0]);
	// Right plane
	frustum.planes[1] = ComputePlane(viewSpace[1], eyePos, viewSpace[3]);
	// Top plane
	frustum.planes[2] = ComputePlane(viewSpace[0], eyePos, viewSpace[1]);
	// Bottom plane
	frustum.planes[3] = ComputePlane(viewSpace[3], eyePos, viewSpace[2]);

	uint2 cullingTileCount = GetCamera().cullingTileCount.xy;
    if (DTid.x < cullingTileCount.x && DTid.y < cullingTileCount.y)
    {
        outFrustums[flatten2D(DTid.xy, cullingTileCount)] = frustum;
    }
}

/////////////////////////////////////////////////////////////////////////////
/// Light Culling
/////////////////////////////////////////////////////////////////////////////

StructuredBuffer<Frustum> inFrustums : register(t0);
RWByteAddressBuffer entityTiles : register(u1);

#if DEBUG_TILEDLIGHTCULLING == 1
RWTexture2D<unorm float4> debugTexture : register(u2);
#endif

// Group shared tiled entities
groupshared uint uTileBuckets[SHADER_ENTITY_TILE_BUCKET_COUNT];
groupshared uint uMinDepth;
groupshared uint uMaxDepth;
groupshared uint uDepthMask;	

#if DEBUG_TILEDLIGHTCULLING == 1
groupshared uint entityCountDebug;
#endif

// The granularty of each cullling thread (16 / 8)
static const uint TILED_CULLING_GRANULARITY = TILED_CULLING_BLOCK_SIZE / TILED_CULLING_THREADSIZE;

// Get depth mask from the sphere
uint GetDepthMaskFromSphere(in float minDepthView, in float depthMaskRcp, in Sphere sphere)
{
    float minZ = sphere.c.z - sphere.r;
    float maxZ = sphere.c.z + sphere.r;
    const uint maskBitBegin = max(0, min(31, floor((minZ - minDepthView) * depthMaskRcp)));
    const uint maskBitEnd = max(0, min(31, floor((maxZ - minDepthView) * depthMaskRcp)));

    //// |-------------- 32 bits ---------|
	////          END         START
	////   0000000000111111111110000000000

    uint depthmask = 0xFFFFFFFF;
    depthmask >>= 31u - (maskBitEnd- maskBitBegin);
    depthmask <<= maskBitBegin;
    return depthmask;
}

void AppendEntity(uint index)
{
	const uint bucketIndex = index / 32;
	const uint bucketBit = index % 32;
	InterlockedOr(uTileBuckets[bucketIndex], 1u << bucketBit);

#if DEBUG_TILEDLIGHTCULLING == 1
	InterlockedAdd(entityCountDebug, 1);
#endif
}

META_CS(true)
META_PERMUTATION_1(DEBUG_TILEDLIGHTCULLING = 0)	// NoDebug
META_PERMUTATION_1(DEBUG_TILEDLIGHTCULLING = 1)	// Debug
[numthreads(TILED_CULLING_THREADSIZE, TILED_CULLING_THREADSIZE, 1)]
void CS_LightCulling(uint3 Gid : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 DTid : SV_DispatchThreadID)
{	
    uint2 dim;
    texture_depth.GetDimensions(dim.x, dim.y);
    float2 dimRcp = rcp(dim);

    const uint tileIndex = flatten2D(Gid.xy, GetCamera().cullingTileCount.xy);
    Frustum frustum = inFrustums[tileIndex];

    // Reset the variables
    uint i = 0;
	for (i = groupIndex; i < SHADER_ENTITY_TILE_BUCKET_COUNT; i += TILED_CULLING_THREADSIZE * TILED_CULLING_THREADSIZE) 
    {
		uTileBuckets[i] = 0;
	}
    if (groupIndex == 0)
	{
		uMinDepth = 0xffffffff;
		uMaxDepth = 0;
		uDepthMask = 0;
#if DEBUG_TILEDLIGHTCULLING == 1
		entityCountDebug = 0;
#endif
    }

    GroupMemoryBarrierWithGroupSync();

    // Calculate min depth and max depth in tile granularity
    float depth[TILED_CULLING_GRANULARITY * TILED_CULLING_GRANULARITY];
    float depthMinGranularity = 10000000;
	float depthMaxGranularity = -10000000;

    uint granularity = 0;
    [unroll]
    for(; granularity < TILED_CULLING_GRANULARITY * TILED_CULLING_GRANULARITY; granularity++)
    {
        uint2 pixel = DTid.xy * uint2(TILED_CULLING_GRANULARITY, TILED_CULLING_GRANULARITY) + unflatten2D(granularity, TILED_CULLING_GRANULARITY);
    	pixel = min(pixel, dim - 1); // Clamp
        depth[granularity] = texture_depth[pixel];
        depthMinGranularity = min(depthMinGranularity, depth[granularity]);
		depthMaxGranularity = max(depthMaxGranularity, depth[granularity]);
    }

    GroupMemoryBarrierWithGroupSync();

	float waveMinDepth = WaveActiveMin(depthMinGranularity);
	float waveMaxDepth = WaveActiveMax(depthMaxGranularity);
	if (WaveIsFirstLane())
	{
		InterlockedMin(uMinDepth, asuint(waveMinDepth));
		InterlockedMax(uMaxDepth, asuint(waveMaxDepth));
	}

	GroupMemoryBarrierWithGroupSync();

	// reversed depth buffer!
	float fMinDepth = asfloat(uMaxDepth);
	float fMaxDepth = asfloat(uMinDepth);

    // AABB Computation
    // AABB use uMinDepth and uMaxDepth to constuct, so it is more tighter fit to reduce over culling
    AABB tileAABB;
    if (WaveIsFirstLane())
    {
        float3 viewSpace[8];
        viewSpace[0] = ScreenToView(float4(Gid.xy * TILED_CULLING_BLOCK_SIZE, fMinDepth, 1.0f), dimRcp).xyz;
        viewSpace[1] = ScreenToView(float4(float2(DTid.x + 1, DTid.y) * TILED_CULLING_BLOCK_SIZE, fMinDepth, 1.0f), dimRcp).xyz;
        viewSpace[2] = ScreenToView(float4(float2(DTid.x, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, fMinDepth, 1.0f), dimRcp).xyz;
        viewSpace[3] = ScreenToView(float4(float2(DTid.x + 1, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, fMinDepth, 1.0f), dimRcp).xyz;

        viewSpace[4] = ScreenToView(float4(Gid.xy * TILED_CULLING_BLOCK_SIZE, fMaxDepth, 1.0f), dimRcp).xyz;
        viewSpace[5] = ScreenToView(float4(float2(DTid.x + 1, DTid.y) * TILED_CULLING_BLOCK_SIZE, fMaxDepth, 1.0f), dimRcp).xyz;
        viewSpace[6] = ScreenToView(float4(float2(DTid.x, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, fMaxDepth, 1.0f), dimRcp).xyz;
        viewSpace[7] = ScreenToView(float4(float2(DTid.x + 1, DTid.y + 1) * TILED_CULLING_BLOCK_SIZE, fMaxDepth, 1.0f), dimRcp).xyz;

        float3 minPos = 10000000;
        float3 maxPos = -10000000;
        for (i = 0; i < 8; i++)
        {
            minPos = min(minPos, viewSpace[i]);
            maxPos = max(maxPos, viewSpace[i]);
        }

        tileAABB.c = (minPos + maxPos) * 0.5f;
        tileAABB.e = abs(maxPos - tileAABB.c);
    }
    tileAABB.c = WaveReadLaneFirst(tileAABB.c);
	tileAABB.e = WaveReadLaneFirst(tileAABB.e);

    // Harada Siggraph 2012 2.5D culling
    // Divide the minmax depth bounds to 32 equal slices to build the depthMask in 32bits
    float minDepthView = ScreenToView(float4(0, 0, fMinDepth, 1), dimRcp).z;
	float maxDepthView = ScreenToView(float4(0, 0, fMaxDepth, 1), dimRcp).z;
	float nearClipView = ScreenToView(float4(0, 0, 1, 1), dimRcp).z;

    float depthRangeRcp = 31.0f / (maxDepthView - minDepthView);
    uint depthMaskGranularity = 0;
    
    [unroll]
    for(granularity = 0; granularity < TILED_CULLING_GRANULARITY * TILED_CULLING_GRANULARITY; granularity++)
    {
        float realDepthView = ScreenToView(float4(0, 0, depth[granularity], 1), dimRcp).z;
        uint depthMaskIndex = max(0, min(31, floor((realDepthView - minDepthView) * depthRangeRcp)));
        depthMaskGranularity |= 1u << depthMaskIndex;
    }
    
    uint waveDepthmask = WaveActiveBitOr(depthMaskGranularity);
    if (WaveIsFirstLane())
    {
        InterlockedOr(uDepthMask, waveDepthmask);
    }

	GroupMemoryBarrierWithGroupSync();

    // Start culling entities 
    const uint depthMask = uDepthMask; // take out from groupshared into register
    const uint entityCount = GetFrame().lightCount;
    for (i = groupIndex; i < entityCount; i += TILED_CULLING_THREADSIZE * TILED_CULLING_THREADSIZE)
    {
        ShaderLight light = GetShaderLight(i);
        switch(light.GetType())
        {
        case SHADER_LIGHT_TYPE_DIRECTIONALLIGHT:
        {
            AppendEntity(i);
        }
        break;
        case SHADER_LIGHT_TYPE_POINTLIGHT:
        {
            float3 posView = mul(GetCamera().view, float4(light.position, 1)).xyz;
            Sphere sphere = {posView, light.GetRange()};
            
            if (SphereInsideFrustum(sphere, frustum, nearClipView, maxDepthView))
            {
                // Check AABB
                if (SphereInsideAABB(sphere, tileAABB))
                {
                    // Check depth mask
                    // depthMask & lightMask > 0 means the light is affect, append it
                    uint lightMask = GetDepthMaskFromSphere(minDepthView, depthRangeRcp, sphere);
                    if (depthMask & lightMask)
                    {
                        AppendEntity(i);
                    }
                }
            }
        }
        break;
        case SHADER_LIGHT_TYPE_SPOTLIGHT:
        {
        }
        break;
        }
    }

	GroupMemoryBarrierWithGroupSync();

    //  Each thread export the bucket from LDS to global memory
    int tileBucketAddress = tileIndex * SHADER_ENTITY_TILE_BUCKET_COUNT;
    for (i = groupIndex; i < SHADER_ENTITY_TILE_BUCKET_COUNT; i += TILED_CULLING_THREADSIZE * TILED_CULLING_THREADSIZE)
    {
        entityTiles.Store(tileBucketAddress * sizeof(uint),  uTileBuckets[i]);
    }

    // Output debug texture
#if DEBUG_TILEDLIGHTCULLING == 1
    for(granularity = 0; granularity < TILED_CULLING_GRANULARITY * TILED_CULLING_GRANULARITY; granularity++)
    {
        uint2 pixel = DTid.xy * uint2(TILED_CULLING_GRANULARITY, TILED_CULLING_GRANULARITY) + unflatten2D(granularity, TILED_CULLING_GRANULARITY);
    
        const float3 mapTex[] = {
			float3(0,0,0),
			float3(0,0,1),
			float3(0,1,1),
			float3(0,1,0),
			float3(1,1,0),
			float3(1,0,0),
		};
		const uint mapTexLen = 5;
		const uint maxHeat = 50;
		float l = saturate((float)entityCountDebug / maxHeat) * mapTexLen;
		float3 a = mapTex[floor(l)];
		float3 b = mapTex[ceil(l)];
		float4 heatmap = float4(lerp(a, b, l - floor(l)), 0.8);
        float4 depthmap = float4(minDepthView, maxDepthView / 10, 0, 1);
		debugTexture[pixel] = heatmap;
    }
#endif
}