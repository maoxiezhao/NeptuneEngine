#include "common/global.hlsli"
#include "common/shaderInterop_renderer.h"
#include "common/primitive.hlsli"
#include "common/surface.hlsli"
#include "common/rayTracing.hlsli"

Texture2D<uint> inputPrimitiveID : register(t0);
RWTexture2D<float> outputDepth : register(u1);
RWTexture2D<float> outputLineardepth : register(u2);

// Source: https://github.com/GPUOpen-Effects/FidelityFX-Denoiser/blob/master/ffx-shadows-dnsr/ffx_denoiser_shadows_util.h
//  LANE TO 8x8 MAPPING
//  ===================
//  00 01 08 09 10 11 18 19 
//  02 03 0a 0b 12 13 1a 1b
//  04 05 0c 0d 14 15 1c 1d
//  06 07 0e 0f 16 17 1e 1f 
//  20 21 28 29 30 31 38 39 
//  22 23 2a 2b 32 33 3a 3b
//  24 25 2c 2d 34 35 3c 3d
//  26 27 2e 2f 36 37 3e 3f 
uint bitfield_extract(uint src, uint off, uint bits) { uint mask = (1u << bits) - 1; return (src >> off) & mask; } // ABfe
uint bitfield_insert(uint src, uint ins, uint bits) { uint mask = (1u << bits) - 1; return (ins & mask) | (src & (~mask)); } // ABfiM
uint2 remap_lane_8x8(uint lane) {
	return uint2(bitfield_insert(bitfield_extract(lane, 2u, 3u), lane, 1u)
		, bitfield_insert(bitfield_extract(lane, 3u, 3u)
			, bitfield_extract(lane, 1u, 2u), 2u));
}

META_CS(true)
[numthreads(VISIBILITY_BLOCKSIZE, VISIBILITY_BLOCKSIZE, 1)]
void CS_Resolve(uint3 Gid : SV_GroupID, uint groupIndex : SV_GroupIndex)
{	
	const uint2 GTid = remap_lane_8x8(groupIndex);
	const uint2 pixel = Gid.xy * VISIBILITY_BLOCKSIZE + GTid.xy;   
    const float2 uv = ((float2)pixel + 0.5) * GetCamera().resolutionRcp;
    const float2 clipspace = UVtoClipspace(uv);
    RayDesc ray = CreateCameraRay(clipspace);

    float depth = 1; // invalid
	uint primitiveID = inputPrimitiveID[pixel];

    const bool pixelValid = (pixel.x < GetCamera().resolution.x) && (pixel.y < GetCamera().resolution.y);
    if (pixelValid)
    {
        [branch]
        if (any(primitiveID))
        {
            PrimitiveID prim;
            prim.Unpack(primitiveID);

            Surface surface;
            surface.Init();
            [branch]
            if (surface.LoadFromPrimitive(prim, ray.Origin, ray.Direction))
            {
                float4 screenPos = mul(GetCamera().viewProjection, float4(surface.P, 1));
                screenPos.xyz /= screenPos.w;
				depth = screenPos.z;
            }            
        }
        else
        {
            depth = 0.0f;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    // Depth
    outputDepth[pixel] = depth;

    // Linear depth
    float linearDepth = ComputeLinearDepth(depth) / GetCamera().zFar;
    outputLineardepth[pixel] = linearDepth;
}